# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}


# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# List all useful IPs
function ip() {
	echo
	echo $'Ethernet:\t' `ipconfig getifaddr en0`
	echo $'Wifi:\t\t' `ipconfig getifaddr en1`
	echo $'Public IP:\t' `ippublic`
	echo $'Assigned IPs:\t'
	ips
	echo
}


# A better git clone
# clones a repository, cds into it, and opens it in my editor.
#
# Based on https://github.com/stephenplusplus/dots/blob/master/.bash_profile#L68 by @stephenplusplus
#
# Note: subl is already setup as a shortcut to Sublime. Replace with your own editor if different
#
# - arg 1 - url|username|repo remote endpoint, username on github, or name of
#           repository.
# - arg 2 - (optional) name of repo
#
# usage:
#   $ clone things
#     .. git clone git@github.com:georgecrawford/things.git things
#     .. cd things
#     .. subl .
#
#   $ clone yeoman generator
#     .. git clone git@github.com:yeoman/generator.git generator
#     .. cd generator
#     .. subl .
#
#   $ clone git@github.com:georgecrawford/dotfiles.git
#     .. git clone git@github.com:georgecrawford/dotfiles.git dotfiles
#     .. cd dots
#     .. subl .

function clone {
  # customize username to your own
  local username="georgecrawford"

  local url=$1;
  local repo=$2;

  if [[ ${url:0:4} == 'http' || ${url:0:3} == 'git' ]]
  then
    # just clone this thing.
    repo=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
  elif [[ -z $repo ]]
  then
    # my own stuff.
    repo=$url;
    url="git@github.com:$username/$repo";
  else
    # not my own, but I know whose it is.
    url="git@github.com:$url/$repo.git";
  fi

  git clone $url $repo && cd $repo && subl .;
}

function gb() {
	php -r "$(cat <<'PHP'
		exec('git branch --no-color', $branches);
		foreach ($branches as $branch) {
			if (preg_match('/redmine(\d+)/', $branch, $matches)) {
				$redmineUrl = sprintf("https://redmine.labs.ft.com/issues/%s)", $matches[1]);
				echo sprintf("%s \t \033[1;32m%s\033[0m\n", $branch, $redmineUrl);
			} else {
				echo $branch . "\n";
			}
		};
PHP
	)"
}

function gl() {
	php -r "$(cat <<'PHP'
		$remote = exec('git remote -v');
		if (!preg_match('/^origin.*push/', $remote)) {
			exit;
		}
		$remote = preg_replace('/.*git@(.*?):(.*?)\.git.*/', 'http://\1/\2/commit/', $remote);
		exec('git log -n5 --name-status --abbrev-commit', $lines);
		foreach ($lines as $line) {
			echo preg_replace('/\b([0-9a-f]{7})\b/', "\\1 \033[1;32m$remote\\1\033[0m", $line) . "\n";
		};
PHP
	)"
}


# # Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress "$1" "$2"
}


# # Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# # Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
# function httpcompression() {
# 	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
# }

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# # prune a set of empty directories
# function prunedir () {
#    find $* -type d -empty -print0 | xargs -0r rmdir -p ;
# }

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}

# # get gzipped size
# function gz() {
# 	echo "orig size    (bytes): "
# 	cat "$1" | wc -c
# 	echo "gzipped size (bytes): "
# 	gzip -c "$1" | wc -c
# }

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# # Decode \x{ABCD}-style Unicode escape sequences
# function unidecode() {
# 	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
# 	echo # newline
# }


